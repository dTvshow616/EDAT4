Para probar la implementaci√≥n de este TAD se proporciona el programa principal p4_e1.c que
debe funcionar sin fugas de memoria, y producir la salida esperada que se incluye en el fichero
run_e1.out (puede haber discrepancias en los mensajes de tiempos). Se proporcionan
adem√°s m√°s ejemplos de ficheros de datos con los que probar este programa.
Es necesario estudiar el c√≥digo proporcionado para entender qu√© operaciones se realizan y qu√©
primitivas del TAD se est√°n utilizando, prestando especial atenci√≥n a la opci√≥n que ordena o no
los datos previamente a trav√©s de la funci√≥n qsort.

------------------------------- Reflexiones sobre el TAD BST -------------------------------
Al ejecutar el programa p4_e1.c se puede comprobar que los tiempos de creaci√≥n y b√∫squeda
var√≠an mucho seg√∫n si el programa se ejecuta en modo normal o en modo ordenado.

- ¬øPor qu√© es as√≠?

Porque crear un √°rbol de manera ordenada consume mucho m√°s tiempo ya que tiene que hacer muchas 
comparaciones. Sin embargo, podemos ver que el tiempo de b√∫squeda es mucho inferior ya que, al estar 
ordenado, podemos hallar el elemento bajando por la rama correspondiente

- ¬øHay alguna propiedad del √°rbol que permita explicar este comportamiento?

En un √°rbol ordenado los n√∫meros m√°s grandes siempre van a la derecha y los m√°s peque√±os a la izquierda,
haciendo que se tarde m√°s en ordenarlo, ya que hay que ver todos los valores, y mucho menos en buscar un nodo.

-------------------------------- Reflexiones sobre el TAD SQ --------------------------------
- ¬øQu√© diferencias y similitudes hay entre el TAD SQ y el TAD Cola de la pr√°ctica anterior?

/*TODO - */

- ¬øQu√© coste (aproximado) tiene la operaci√≥n de extraer un elemento en el TAD SQ?
¬øSer√≠a posible hacer que esta operaci√≥n fuera ùí™(1)?

/*TODO - */